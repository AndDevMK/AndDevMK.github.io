<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on AndDevMK&#39;s android blog site</title>
    <link>https://anddevmk.github.io/categories/flutter/</link>
    <description>Recent content in Flutter on AndDevMK&#39;s android blog site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>AndDevMK</copyright>
    <lastBuildDate>Tue, 05 Dec 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://anddevmk.github.io/categories/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解读Flutter源码之绘制Paint过程</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8B%E7%BB%98%E5%88%B6paint%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 05 Dec 2023 08:00:00 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8B%E7%BB%98%E5%88%B6paint%E8%BF%87%E7%A8%8B/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、与绘制相关的对象 Flutter中与绘制相关的对象有三个，分别是Canvas、Layer和Scene。 Canvas：封装了Flutter Skia各种绘制指令，比如画线drawLine、画圆drawCircle、画矩形drawRect等指令。 La</description>
    </item>
    
    <item>
      <title>解读Flutter源码之布局Layout过程</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8B%E5%B8%83%E5%B1%80layout%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 01 Dec 2023 08:00:00 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8B%E5%B8%83%E5%B1%80layout%E8%BF%87%E7%A8%8B/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、理解布局约束 在学习Flutter的过程中可能会遇到这样一个问题：为什么给Widget设置了width: 100，但是不起作用？ 这时候最应该做的不是怎样去解决这个问题，而是要先去熟悉这条规则：首先，上层Widget向下层Widget传递约束条件；</description>
    </item>
    
    <item>
      <title>解读Flutter源码之Navigator（声明式）</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bnavigator%E5%A3%B0%E6%98%8E%E5%BC%8F/</link>
      <pubDate>Sun, 26 Nov 2023 09:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bnavigator%E5%A3%B0%E6%98%8E%E5%BC%8F/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在之前解读Flutter源码之Navigator（命令式）一文中，已分析过Navigator的相关方法API与底层原理，知道了Navigator内部通过Overlay组件来管理路由页面堆栈。 在Flutter1.22版本发布之后，可以发现本</description>
    </item>
    
    <item>
      <title>解读Flutter源码之Navigator（命令式）</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bnavigator%E5%91%BD%E4%BB%A4%E5%BC%8F/</link>
      <pubDate>Sun, 19 Nov 2023 09:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bnavigator%E5%91%BD%E4%BB%A4%E5%BC%8F/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、什么是Navigator？ 先来看下Navigator的注释。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91</description>
    </item>
    
    <item>
      <title>解读Flutter源码之GestureDetector</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bgesturedetector/</link>
      <pubDate>Tue, 14 Nov 2023 09:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bgesturedetector/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在之前解读Flutter源码之Listener一文中，我们已经知道Listener用来监听原始指针事件，它的事件处理流程分为命中测试-事件分发-事件清理三部分。 而本文所讲的GestureDetector，它的内部实际上是对Listener</description>
    </item>
    
    <item>
      <title>解读Flutter源码之Listener</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Blistener/</link>
      <pubDate>Sat, 11 Nov 2023 09:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Blistener/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、什么是Listener？ Listener可以用来监听原始指针事件（Raw Pointer Event，在移动设备上通常为触摸事件），先来看下它的注释&amp;amp;部分源码。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45</description>
    </item>
    
    <item>
      <title>解读Flutter源码之NotificationListener</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bnotificationlistener/</link>
      <pubDate>Tue, 07 Nov 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bnotificationlistener/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在之前解读Flutter源码之InheritedWidget一文中，我们已知晓，在Widget多层嵌套的情况下，将数据从父级Widget传递给子级Widget时，采用InheritedWidget的方式非常好用。 但是，如果传递方向是反过来</description>
    </item>
    
    <item>
      <title>解读Flutter源码之Animation</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Banimation/</link>
      <pubDate>Sat, 04 Nov 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Banimation/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 如果你开发的App失去了交互动画，那么这将是一件很难想象的事情，此时它的体验必然一言难尽，用户会为它贴上“傻快”、“生硬”、“粗糙”等标签，从而你将不得不丢失一部分用户。 因此，精心设计的动画会使UI更生动，它有助于提升App更精巧的外观和</description>
    </item>
    
    <item>
      <title>解读Flutter源码之InheritedWidget</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Binheritedwidget/</link>
      <pubDate>Tue, 31 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Binheritedwidget/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、子Widget多层嵌套之状态管理问题 在Flutter开发中，如果父Widget想要控制子Widget的状态，最常见的办法是把子Widget的状态提升到父Widget中，当父Widget修改该状态并且执行了setState方法之后，子Widge</description>
    </item>
    
    <item>
      <title>解读Flutter源码之Key</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bkey/</link>
      <pubDate>Fri, 27 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bkey/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、Key是什么？ 在Flutter中，Key的使用是很常见的，就以Scaffold这个Widget来说，当人们使用它的Drawer功能时，必然会涉及openDrawer与closeDrawer这两个行为，它们的具体方法实现定义在ScaffoldS</description>
    </item>
    
    <item>
      <title>解读Flutter源码之setState</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bsetstate/</link>
      <pubDate>Sat, 21 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bsetstate/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在上一文解读Flutter源码之StatefulWidget&amp;amp;State的生命周期中，笔者分析了State生命周期的相关方法，但碍于篇幅有限，对于setState方法只是进行了简单描述，还未进行深入分析。 因此，本文将会深入分析se</description>
    </item>
    
    <item>
      <title>解读Flutter源码之StatefulWidget&amp;State的生命周期</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bstatefulwidgetstate%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 18 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bstatefulwidgetstate%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在上一文解读Flutter源码之runApp中，笔者对于StatefulWidget与StatefulElement源码的分析并未足够深入，而且State相关的分析也并未涉及。 因此，本文将会深入分析StatefulWidget的源码&amp;am</description>
    </item>
    
    <item>
      <title>解读Flutter源码之runApp</title>
      <link>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Brunapp/</link>
      <pubDate>Sat, 14 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Brunapp/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在上一文Flutter源码之三颗树分类中，我们对Flutter的三颗树Widget、Element、RenderObject进行了简单的分类，知道了Widget可分为RenderObjectWidget一类和非RenderObjectWi</description>
    </item>
    
    <item>
      <title>Flutter源码之三颗树分类</title>
      <link>https://anddevmk.github.io/post/flutter%E6%BA%90%E7%A0%81%E4%B9%8B%E4%B8%89%E9%A2%97%E6%A0%91%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 10 Oct 2023 14:47:31 +0800</pubDate>
      
      <guid>https://anddevmk.github.io/post/flutter%E6%BA%90%E7%A0%81%E4%B9%8B%E4%B8%89%E9%A2%97%E6%A0%91%E5%88%86%E7%B1%BB/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、Widget的分类 作为一个初学者，我们知道在Flutter中万物皆Widget，这恰恰说明了Widget在Flutter中的一个重要性，那么以Android开发者的角度来看，Flutter中的Widget是否等同于Android中的View呢</description>
    </item>
    
  </channel>
</rss>
