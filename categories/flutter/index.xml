<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on AndDevMK&#39;s android blog site</title>
    <link>https://anddevmk.cn/categories/flutter/</link>
    <description>Recent content in Flutter on AndDevMK&#39;s android blog site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>AndDevMK</copyright>
    <lastBuildDate>Sat, 21 Oct 2023 11:28:31 +0800</lastBuildDate><atom:link href="https://anddevmk.cn/categories/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>解读Flutter源码之setState</title>
      <link>https://anddevmk.cn/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bsetstate/</link>
      <pubDate>Sat, 21 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.cn/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bsetstate/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在上一文解读Flutter源码之StatefulWidget&amp;amp;State的生命周期中，笔者分析了State生命周期的相关方法，但碍于篇幅有限，对于setState方法只是进行了简单描述，还未进行深入分析。 因此，本文将会深入分析se</description>
    </item>
    
    <item>
      <title>解读Flutter源码之StatefulWidget&amp;State的生命周期</title>
      <link>https://anddevmk.cn/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bstatefulwidgetstate%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 18 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.cn/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Bstatefulwidgetstate%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在上一文解读Flutter源码之runApp中，笔者对于StatefulWidget与StatefulElement源码的分析并未足够深入，而且State相关的分析也并未涉及。 因此，本文将会深入分析StatefulWidget的源码&amp;am</description>
    </item>
    
    <item>
      <title>解读Flutter源码之runApp</title>
      <link>https://anddevmk.cn/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Brunapp/</link>
      <pubDate>Sat, 14 Oct 2023 11:28:31 +0800</pubDate>
      
      <guid>https://anddevmk.cn/post/%E8%A7%A3%E8%AF%BBflutter%E6%BA%90%E7%A0%81%E4%B9%8Brunapp/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、前言 在上一文Flutter源码之三颗树分类中，我们对Flutter的三颗树Widget、Element、RenderObject进行了简单的分类，知道了Widget可分为RenderObjectWidget一类和非RenderObjectWi</description>
    </item>
    
    <item>
      <title>Flutter源码之三颗树分类</title>
      <link>https://anddevmk.cn/post/flutter%E6%BA%90%E7%A0%81%E4%B9%8B%E4%B8%89%E9%A2%97%E6%A0%91%E5%88%86%E7%B1%BB/</link>
      <pubDate>Tue, 10 Oct 2023 14:47:31 +0800</pubDate>
      
      <guid>https://anddevmk.cn/post/flutter%E6%BA%90%E7%A0%81%E4%B9%8B%E4%B8%89%E9%A2%97%E6%A0%91%E5%88%86%E7%B1%BB/</guid>
      <description>注：本文代码基于Flutter SDK 3.13.5 一、Widget的分类 作为一个初学者，我们知道在Flutter中万物皆Widget，这恰恰说明了Widget在Flutter中的一个重要性，那么以Android开发者的角度来看，Flutter中的Widget是否等同于Android中的View呢</description>
    </item>
    
  </channel>
</rss>
